		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Avinash Parasurampuram <parasur2@buffalo.edu>
Bharat Sesham <bharatse@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

None. The modifications were done at the local scope.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Most of the code is implemented in the setup_stack() function. Firstly, in the
load() function, we tokenized the file_name and processed them into argv and argc which were
then passed to the modifed setup_stack().

Then in the setup_stack, we have done the following operation on the stack:
1. Pushing the arguments into the stack in a growing downward manner.
2. Adding the word align
3. Pushing a null pointer sentinel.
4. Pushing all the addresses of the arguments onto the stack.
5. Pushing argv to the stack which has the address of argv[0].
6. Pushing the number of arguments passed (argc).
7. Pushing the fake return address.

While adding the arguments to the stack, we ensure they are added in the reverse order by iterating the arguments backward so that
the first token we get is the last argument. At each iteration, we decrement the esp pointer by the size of the number of bytes of
the data type.

We calculate the stack length at the end of the operations and if the stack length is greater than the PG_SIZE, then we return false to avoid stack overlow. 

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok() uses global data and this could be unsafe in threaded programs 
such as kernels. The context pointer that is provided by the caller as 
part of strtok_r() is used to store state between calls instead of using 
a global variable.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. In UNIX, kernel doesnt take care of the parsing of arguments and this happens at the user level. This 
saves time at the kernel level and also avoids any unexpected crashes at the kernel level thus making it more robust.

2. Custom command checks can be put in place and some processing/validations can be done beforehand making it more flexible.   

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In process.h

#define INIT_PID ((pid_t) -2)

/* Process Control Block */
struct pcb {
  pid_t pid;                /* The pid of process */
  const char* argline;      /* The command line of this process being executed */
  struct list_elem elem;    /* element in the child list */
  int32_t exitcode;         /* the exit code passed from exit() */
  bool process_waiting;     /* verifies if parent process is waiting */
  bool process_done;        /* indicates if the process is done. */
  struct semaphore sema_begin;   /* the semaphore used between start_process() and process_execute() */
  struct semaphore sema_wait;    /* the semaphore used for wait() : parent blocks until child exits  */
};

In thread.h

struct pcb *pcb;                    /* Process control Block. */
struct list child_list;             /* List that contains child processess */

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We have choosen the method two from section 4.7 (Accessing User Memory) 
in the PA2_Description_2020.pdf. When we are accessing the user memory 
from the kernel, we should check if the address sent by the user program
is correct. First we check if the user address is less than PHYS_BASE,then 
we use the get_user() to read a byte at user virtual address UADDR and it 
returns the byte value if successful. However, if it is an invalid memory 
area, -1 should be returned as a segfault would have occurred. Since all 
user memory accesses go through this function, it checks if it is the correct 
memory access. So, finally we choose this method as this method takes advantage 
of the processor's MMU and it tends to be used in real kernels as specified in
the PDF.


>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We maintain the default mapping between pid_t and tid_t, with identity function.
We didn't change it.  


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
